rule grammar
  ws rules:parsing_rule*
end

rule parsing_rule
  'rule' ws :rule_name expression:choice ws 'end' ws
end

rule choice
  head:creator tail:('/' ws @:creator)+ <Choice> /
  creator
end

rule creator
  expression:sequence '<' class_name:(!'>' .)+ '>' ws <ObjectCreator> /
  expression:sequence '{' :code '}' ws <ValueCreator> /
  sequence
end

rule code
  (![{}] . / '{' code '}')*
end

rule sequence
  children:labeled+ <Sequence>
end
      
rule labeled
  name:(alpha_char alphanumeric_char*) ':' expression:lookahead <Label> /
  lookahead
end

rule lookahead
  '&' expression:repetition <PositiveLookahead> /
  '!' expression:repetition <NegativeLookahead> /
  repetition
end

rule repetition
  expression:primary '?' ws <Optional> /
  expression:primary '*' ws <ZeroOrMore> /
  expression:primary '+' ws <OneOrMore> /
  primary
end

rule primary
  terminal /
  rule_name_label /
  parenthesized_expression
end

rule parenthesized_expression
  '(' ws expression:choice ')' ws <ParenthesizedExpression>
end

rule rule_name_label
  ":" expression:rule_name <RuleNameLabel> /
  rule_name
end

rule rule_name
  !keyword name:(alpha_char alphanumeric_char*) ws <RuleName>
end

rule terminal
  quoted_string / character_class / anything_symbol
end

rule quoted_string
  (
    '"' string:(!'"' ("\\\\" / '\"' / .))* '"' ws /
    "'" string:(!"'" ("\\\\" / "\\'" / .))* "'" ws
  ) <StringTerminal>
end

rule character_class
  '[' inverted:'^'? selections:(character_class_range / character_class_single_character)+ ']' ws <CharacterClassTerminal>
end

rule character_class_single_character
  '\\' char_element:. <CharacterClassEscapedCharacter> /
  (!']') char_element:. <CharacterClassSingleCharacter>
end

rule character_class_range
  begin_char:character_class_single_character '-' end_char:character_class_single_character <CharacterClassRange>
end

rule anything_symbol
  '.' ws <AnyCharacterTerminal>
end

rule keyword
  ('rule' / 'end') &single_ws
end

rule alpha_char
  [A-Za-z_@]
end

rule alphanumeric_char
  alpha_char / [0-9]
end

rule ws
  single_ws*
end

rule single_ws
  [ \t\n\r] / line_comment
end

rule line_comment
  '#' [^\n]*
end
