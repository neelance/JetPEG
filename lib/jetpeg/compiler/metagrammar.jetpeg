rule grammar
  ws? rules:parsing_rule*
end

rule parsing_rule
  'rule' ws :rule_name parameters:( '[' local_value{ ',' ws }* ']' )? ws expression:rule_expression 'end' ws
end

rule rule_expression
  ws? choice
end

rule choice
  head:creator tail:( '/' ws creator )+ <Choice> /
  creator
end

rule creator
  expression:sequence '<' class_name:( !'>' . )+ '>' ws <ObjectCreator> /
  expression:sequence '{' :code '}' ws <ValueCreator> /
  sequence
end

rule code
  @:( ![{}] . / '{' code '}' )*
end

rule sequence
  children:labeled+ <Sequence>
end

rule labeled
  ( '%' is_local:$true )? name:( '@' / alpha_char alphanumeric_char* ) ':' expression:lookahead <Label> /
  lookahead
end

rule lookahead
  '&' expression:repetition <PositiveLookahead> /
  '!' expression:repetition <NegativeLookahead> /
  repetition
end

rule repetition
  expression:primary '?' ws <Optional> /
  expression:primary '*->' until_expression:primary <Until> /
  expression:primary ( '{' ws glue_expression:choice '}' )? '*' ws <ZeroOrMore> /
  expression:primary ( '{' ws glue_expression:choice '}' )? '+' ws <OneOrMore> /
  primary ws
end

rule primary
  (
    terminal /
    rule_call_label /
    parenthesized_expression /
    local_value /
    function
  )
end

rule parenthesized_expression
  '(' ws expression:choice? ')' <ParenthesizedExpression>
end

rule local_value
  '%' name:( alpha_char alphanumeric_char* ) <LocalValue>
end

rule rule_call_label
  ":" expression:rule_call <RuleCallLabel> /
  rule_call
end

rule rule_call
  name:rule_name arguments:( '[' local_value{ ',' ws }* ']' )? <RuleCall>
end

rule rule_name
  !keyword @:( alpha_char alphanumeric_char* )
end

rule terminal
  quoted_string <StringTerminal> /
  '[' ( '^' inverted:$true )? selections:( character_class_range / character_class_single_character )+ ']' <CharacterClassTerminal> /
  '.' <AnyCharacterTerminal>
end

rule function
  '$true' <TrueFunction> /
  '$false' <FalseFunction> /
  '$match' '[' string:local_value ']' <MatchFunction> /
  '$error' '[' message:quoted_string ']' <ErrorFunction> /
  '$enter_mode' '[' name:quoted_string ',' ws expression:choice ']' <EnterModeFunction> /
  '$leave_mode' '[' name:quoted_string ',' ws expression:choice ']' <LeaveModeFunction> /
  '$in_mode' '[' name:quoted_string ']' <InModeFunction>
end

rule quoted_string
  '"' @:( !'"' ( "\\\\" / '\"' / . ) )* '"' /
  "'" @:( !"'" ( "\\\\" / "\\'" / . ) )* "'"
end

rule character_class_single_character
  '\\' @:. <CharacterClassEscapedCharacter> /
  ( !']' ) @:. <CharacterClassSingleCharacter>
end

rule character_class_range
  begin_char:character_class_single_character '-' end_char:character_class_single_character <CharacterClassRange>
end

rule keyword
  ( 'rule' / 'end' ) &single_ws
end

rule alpha_char
  [A-Za-z_]
end

rule alphanumeric_char
  alpha_char / [0-9]
end

rule ws
  single_ws+ / &']' / &'\0'
end

rule single_ws
  [ \t\n\r] / line_comment
end

rule line_comment
  '#' [^\n]*
end
